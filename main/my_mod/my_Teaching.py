#coding: utf-8
# 自作関数読み込みのためのライブラリ
import sys
# 主に時間計測やwait処理などで必要なライブラリ
import time
# コンフィグファイル使用のライブラリ
import configparser

# 自作関数の場所をsystempathに追加
sys.path.append("/home/pi/2021/main/my_mod")
# motor制御関数群(/home/pi/2021/my_mod/my_motorのクラスMotor)
from my_motor import Motor
# 機体制御関数群(/home/pi/2021/my_mod/my_operatfunction.pyのクラスOF)
from my_operatfunction import OF

def Teaching(sen_data):

    # 機体制御関数群のインスタンス生成
    of = OF()
    # モータ制御関数群のインスタンス生成
    motor = Motor()

    # データがすべて揃うまでループ endtimeはデータの一番後列
    while(not('endtime' in sen_data)):
        # passは何もせず処理をパスする(whileのなかをカラッポにできないため)
        pass

    # 初期向きの暗記(センサー値の取得に時間がかかるためデータが正常値になるまで無限ループ)
    while(True):
        # データが正常ならwhileをbreakする
        if(abs(sen_data["x"]) > 0.1):
            # データが正常ならinitial(初期)_x(オイラー角方位)に値を代入
            ini_x = sen_data["x"]
            # whileをbreak
            break

    # 初期向きの反対(Uターンなどで使う:initial(初期)_oppose(反対)x(オイラー角方位))
    ini_opx = 0

    # Uターン後のPID方位(初期方位の180°反転)
    # 方位は0~360なので初期方位が180より大きかったら初期方位から180引き反転させる
    # 初期方位が180より小さければ180足し反転させる
    if ini_x < 180:
        ini_opx = ini_x+180
    else:
        ini_opx = ini_x-180

    # 方向PIDの目的値表示-------------------------------------------

    print("初期方位 : "+str(ini_x))
    print("Uターン後PID方位 : "+str(ini_opx))
    print("\n")

    # 方向PIDの目的値表示-------------------------------------------


    # 設定ファイル読み込み-------------------------------------------

    # コンフィグファイルの場所
    INI_FILE = "/home/pi/2021/main/config/config.ini"
    # クラスをインスタンス化
    inifile = configparser.ConfigParser()
    #  コンフィグファイルの場所 文字コードを指定しコンフィグ読み込み
    inifile.read(INI_FILE,encoding="utf-8")

    # 整数型のリスト読み込み
    # モータの回転数で機体を制御する際に使用している
    rotate = eval(inifile.get("teaching","rotate"))

    # 設定ファイル読み込み-------------------------------------------


    # モータの回転数を表示-------------------------------------------

    print("モータ(前進後進に関係ある4つ)の回転数合計")
    print("潜水位置まで\t\t\t"+str(rotate[0])+"回転")
    print("潜水中　途中浮上位置まで\t"+str(rotate[1])+"回転")
    print("潜水中　Uターン場所まで\t\t"+str(rotate[2])+"回転")
    print("潜水中　途中浮上位置まで\t"+str(rotate[3])+"回転")
    print("スタート位置まで\t\t"+str(rotate[4])+"回転\n\n")

    # モータの回転数を表示-------------------------------------------


    # log再生------------------------------------------------------

    # 潜水位置まで-------------------------------------------------
    print("潜水位置まで")
    # モータの回転数で機体を前進させる関数(潜らない)
    of.rotate_advance(rotate[0],ini_x,sen_data)
    # 潜水位置まで-------------------------------------------------

    # 潜水位置まで潜水---------------------------------------------
    print("潜水")
    # 潜る関数コンフィグファイル(/home/pi/2021/main/config/config.ini)に記述している深さに潜る
    of.diving(sen_data)
    # 潜水位置まで潜水---------------------------------------------

    # 潜航　途中浮上位置まで--------------------------------------
    print("途中浮上位置まで")
    # モータの回転数で機体を前進させる関数(潜りながら)潜る深さはコンフィグファイル
    of.diving_advance(rotate[1],ini_x,sen_data)
    # 潜航　途中浮上位置まで--------------------------------------

    # 途中浮上---------------------------------------------------
    print("途中浮上")
    # 浮上する関数(潜る前の深さを記憶している深さまで)
    of.ascend(sen_data)
    # 大会で審査員が採点できるように5秒wait
    time.sleep(5)
    # 途中浮上---------------------------------------------------

    # 潜水位置まで潜水---------------------------------------------
    print("潜水")
    # 潜る関数コンフィグファイル(/home/pi/2021/main/config/config.ini)に記述している深さに潜る
    of.diving(sen_data)
    # 潜水位置まで潜水---------------------------------------------

    # 浮上位置まで------------------------------------------------
    print("浮上位置まで")
    # モータの回転数で機体を前進させる関数(潜りながら)潜る深さはコンフィグファイル
    of.diving_advance(rotate[2],ini_x,sen_data)
    # 浮上位置まで------------------------------------------------

    # 浮上-------------------------------------------------------
    print("浮上")
    # 浮上する関数(潜る前の深さを記憶している深さまで)
    of.ascend(sen_data)
    # 大会で審査員が採点できるように5秒wait
    time.sleep(5)
    # 浮上-------------------------------------------------------

    # Uターン----------------------------------------------------
    print("Uターン")
    # この関数は機体の向きを制御する関数今回は初期位置の180反転の方位を与えUターンさせている
    of.rotate_yaw(ini_opx,sen_data)
    # Uターン----------------------------------------------------

    # Uターン後に方位を取得しなおす事で正確にかえって来れるため再取得
    ini_opx = sen_data["x"]

    # 潜水位置まで潜水---------------------------------------------
    print("潜水")
    # 潜る関数コンフィグファイル(/home/pi/2021/main/config/config.ini)に記述している深さに潜る
    of.diving(sen_data)
    # 潜水位置まで潜水---------------------------------------------

    # 浮上位置まで------------------------------------------------
    print("浮上位置まで")
    # モータの回転数で機体を前進させる関数(潜りながら)潜る深さはコンフィグファイル
    of.diving_advance(rotate[3],ini_opx,sen_data)
    # 浮上位置まで------------------------------------------------

    # 浮上-------------------------------------------------------
    print("浮上")
    # 浮上する関数(潜る前の深さを記憶している深さまで)
    of.ascend(sen_data)
    # 大会で審査員が採点できるように5秒wait
    time.sleep(5)
    # 浮上-------------------------------------------------------

    # スタート位置まで--------------------------------------------
    print("スタート位置まで")
    # モータの回転数で機体を前進させる関数(潜らない)
    of.rotate_advance(rotate[4],ini_opx,sen_data)
    print("\n")
    # スタート位置まで--------------------------------------------

    # すべてのモータstop
    motor.stop()

    # log再生------------------------------------------------------

# ここはこのファイルを単体で実行するとここからプログラムがスタートする。
if __name__ == "__main__":
    Teaching()
