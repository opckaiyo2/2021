[main]

    # 操作方法 1:Teaching 2:自律 3:手動 4:知能 5:テスト
    operation = 5

    # ログの生成 0:生成なし 1:生成あり
    log_flag = 1

[operation]

    # gps初期位置
    gps_initial = {'lat':00,'lon':00,'alt':00}

    # gps潜水位置
    gps_diving = {'lat':00,'lon':00,'alt':00}

    # gps浮上位置
    gps_ascend = {'lat':00,'lon':00,'alt':00}

    # test用
    gps_test = {'lat':00,'lon':00,'alt':00}

    # defalut speed 0~100
    #defalut_speed = 55(この値が電流値の限界これ以上の出力は電気と要相談)
    defalut_speed = 15

    # pidでの目的の深さ
    #depth = 0.7(本番ではこの値陸上でテストするときは0に設定すればok)
    depth = 0.25
    # スラスタの回転数
[teaching]

    rotate = [60000,45000,45000,18000,18000]

[autonomy]

    # 潜航時のモータ回転数(4つのもーた平均)
    ava_rot = 10000

    # 浮上時目的地をずれが大きく潜りなおすときの潜航時のモータ回転数
    re_rot = 1000

[manual]

    # ログの生成 0:生成なし 1:生成あり
    log_flag = 0

[yaw_pid]

    # Kpは比例制御:誤差が多ければ多いほど操作量を増やす
    Kp = 0.5

    # Kiは積分制御:誤差のある状態が長い時間続けばそれだけ
    # 操作量の変化を大きくして目標値に近づけようとする
    Ki = 0.0

    # Kdは微分制御:急激な操作量の変化が起こった場合
    # その変化の大きさに比例した操作を行うことでその急激な操作量に抗しようとする役目を果たす。
    Kd = 0.001

[depth_pid]

    # Kpは比例制御:誤差が多ければ多いほど操作量を増やす
    Kp = 0.5

    # Kiは積分制御:誤差のある状態が長い時間続けばそれだけ
    # 操作量の変化を大きくして目標値に近づけようとする
    Ki = 0.003

    # Kdは微分制御:急激な操作量の変化が起こった場合
    # その変化の大きさに比例した操作を行うことでその急激な操作量に抗しようとする役目を果たす。
    Kd = 0.01
